name: Simplified Build and Release

on:
  push:
    branches:
      - main # Push to main branch will trigger a 'dev' release (no tag needed)
    tags:
      - 'v*.*' # Push a tag like v1.0.0 will trigger a 'stable' release
  pull_request:
    branches:
      - '*' # Pull requests will trigger a build for testing, but not a release

permissions:
  contents: write # 允许写入 contents，用于创建 release 和上传资产

jobs:
  # Job to build the application
  build:
    runs-on: ${{ matrix.runs_on }}
    name: Build ${{ matrix.job_name_suffix }}
    strategy:
      fail-fast: false
      matrix:
        # Simplified matrix for demonstration. You can add more targets here.
        # For a full release, you'd define all necessary targets here.
        include:
          - bsh_host_arch: 'x86_64'
            bsh_host_platform: 'linux'
            bsh_host_libc: 'gnu'
            bsh_static_dynamic: 'static'
            bsh_build_platform: 'linux'
            bsh_debug_release: 'release'
            runs_on: 'ubuntu-22.04'
            package_suffix: ''
            package_mode: 'default'
            artifact_name_suffix: '-linux-x64-static' # Used for artifact naming
            job_name_suffix: 'Linux x64 (Static)'
            # shell: 'bash' # Default shell is bash on linux, no need to specify

          - bsh_host_arch: 'x86_64'
            bsh_host_platform: 'windows'
            bsh_host_libc: 'msvc'
            bsh_static_dynamic: 'static'
            bsh_build_platform: 'windows'
            bsh_debug_release: 'release'
            runs_on: 'windows-2022'
            package_suffix: '.exe'
            package_mode: 'default'
            artifact_name_suffix: '-windows-x64-msvc-static'
            job_name_suffix: 'Windows x64 (MSVC Static)'
            # shell: 'powershell' # Default shell is powershell on windows, no need to specify

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Meson and Ninja
        run: python -m pip install meson ninja

      - name: Get Project Version (from meson)
        id: get_version
        run: |
          # Use meson to get the project version, similar to prepare.py
          meson setup -Dprepare=true build-prepare
          VERSION=$(python -c "import json; print(json.load(open('build-prepare/meson-info/intro-projectinfo.json'))['version'].split('-')[0])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Run Build Script
        run: bash -c './.github/build.sh'
        env:
          # Pass build parameters from matrix
          BSH_HOST_ARCH: ${{ matrix.bsh_host_arch }}
          BSH_HOST_PLATFORM: ${{ matrix.bsh_host_platform }}
          BSH_HOST_LIBC: ${{ matrix.bsh_host_libc }}
          BSH_STATIC_DYNAMIC: ${{ matrix.bsh_static_dynamic }}
          BSH_BUILD_PLATFORM: ${{ matrix.bsh_build_platform }}
          BSH_DEBUG_RELEASE: ${{ matrix.bsh_debug_release }}
          # Simplified release info (can be customized)
          RELEASE_NAME: 'Release' # Will be overwritten by release job for tags
          RELEASE_TYPE: 'dev'     # Will be overwritten by release job for tags
          MOD_ID: '0'             # Example: set a default mod_id
          APP_NAME: 'The Powder Toy' # Example: set a default app_name
          APP_COMMENT: 'A physics sandbox game.'
          APP_EXE: 'powder'       # Example: main executable name
          APP_ID: 'powder-toy'
          APP_DATA: 'data'
          APP_VENDOR: 'The Powder Toy Developers'
          SEPARATE_DEBUG: 'no' # Simplified: assume no separate debug info for this matrix
          PACKAGE_MODE: ${{ matrix.package_mode }}
          # Asset paths relative to build directory
          ASSET_PATH: 'build/powder${{ matrix.package_suffix }}'
          DEBUG_ASSET_PATH: 'build/powder.dbg' # Placeholder, not used if SEPARATE_DEBUG is no

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: powder-release${{ matrix.artifact_name_suffix }} # Unique name for each artifact
          path: build/powder${{ matrix.package_suffix }}
          # No debug artifact for this simplified example

  # Job to create GitHub Release and upload assets
  release:
    runs-on: ubuntu-latest
    needs: [build] # Depends on the build job to complete successfully
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') # Only run for pushes to tags or main branch
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python for Meson version extraction
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install Meson (for version extraction)
        run: python -m pip install meson ninja

      - name: Get Project Version and Release Info
        id: get_release_info
        run: |
          # Use meson to get the project version (similar to prepare.py)
          meson setup -Dprepare=true build-prepare
          VERSION=$(python -c "import json; print(json.load(open('build-prepare/meson-info/intro-projectinfo.json'))['version'].split('-')[0])")
          CURRENT_DATE=$(date +'%Y-%m-%d')
          
          RELEASE_TYPE=""
          RELEASE_NAME=""
          TAG_NAME=""

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            RELEASE_TYPE="dev"
            RELEASE_NAME="Development Build (${CURRENT_DATE})"
            TAG_NAME="dev-build-${{ github.sha }}" # Use commit SHA for unique dev build tag
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            RELEASE_TYPE="stable"
            TAG_NAME="${{ github.ref }}"
            # Extract version from tag name
            VERSION_FROM_TAG=$(echo "${{ github.ref }}" | sed -E 's/refs\/tags\/(v.*)/\1/')
            RELEASE_NAME="${VERSION_FROM_TAG} (${CURRENT_DATE})"
          else
            echo "Unexpected ref: ${{ github.ref }}"
            exit 1
          fi

          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT # Pass current meson project version
        env:
          GITHUB_REF: ${{ github.ref }} # Pass GITHUB_REF to the script

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into 'artifacts' directory

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2 # 使用更简洁的 release action
        with:
          tag_name: ${{ steps.get_release_info.outputs.tag_name }}
          name: ${{ steps.get_release_info.outputs.release_name }}
          body: |
            ## ${{ steps.get_release_info.outputs.release_name }}
            
            This is an automated release for ${{ steps.get_release_info.outputs.release_type }} version `${{ steps.get_release_info.outputs.version }}`.
            
            **Changes:**
            - (Add your change log here or auto-generate from commits)
            
            **Build Details:**
            - Workflow Run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Commit: `${{ github.sha }}`
            - Branch: `${{ github.ref }}`
          draft: false # Set to true to create a draft release
          prerelease: ${{ steps.get_release_info.outputs.release_type != 'stable' }} # Set to true for dev or beta releases
          files: artifacts/* # Upload all downloaded artifacts

